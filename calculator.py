{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/HWAN-OH/H2-Ammonia-Simulator/blob/main/calculator.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# calculator.py\n",
        "import numpy as np\n",
        "\n",
        "def calculate_annual_production(config):\n",
        "    \"\"\"연간 수소 및 암모니아 생산량을 계산합니다.\"\"\"\n",
        "    # 0으로 나누기 방지\n",
        "    if config['H2_LHV'] == 0 or config['ELECTROLYZER_EFFICIENCY'] == 0:\n",
        "        return 0, 0\n",
        "\n",
        "    h2_production_per_hour = (config['PLANT_CAPACITY_KW'] * config['CAPACITY_FACTOR']) / (config['H2_LHV'] / config['ELECTROLYZER_EFFICIENCY'])\n",
        "    annual_h2_production_kg = h2_production_per_hour * 24 * 365\n",
        "    annual_nh3_production_kg = annual_h2_production_kg * 5.617\n",
        "    annual_nh3_production_tonne = annual_nh3_production_kg / 1000\n",
        "\n",
        "    return annual_h2_production_kg, annual_nh3_production_tonne\n",
        "\n",
        "def calculate_capital_costs(config, annual_nh3_production_tonne):\n",
        "    \"\"\"총 CAPEX 비용을 계산합니다.\"\"\"\n",
        "    electrolyzer_capex = config['PLANT_CAPACITY_KW'] * config['ELECTROLYZER_CAPEX']\n",
        "    asu_capex = config['PLANT_CAPACITY_KW'] * config['ASU_CAPEX']\n",
        "    hb_capex = config['PLANT_CAPACITY_KW'] * config['HB_CAPEX']\n",
        "    storage_capex = (annual_nh3_production_tonne / 365) * 15 * config['STORAGE_CAPEX']\n",
        "\n",
        "    total_capex = electrolyzer_capex + asu_capex + hb_capex + storage_capex\n",
        "\n",
        "    # 0으로 나누기 방지\n",
        "    if (1 + config['DISCOUNT_RATE']) == 0:\n",
        "        replacement_present_value = 0\n",
        "    else:\n",
        "        replacement_cost = electrolyzer_capex * ((1 + config['INFLATION_RATE']) ** config['ELECTROLYZER_LIFETIME'])\n",
        "        replacement_present_value = replacement_cost / ((1 + config['DISCOUNT_RATE']) ** config['ELECTROLYZER_LIFETIME'])\n",
        "\n",
        "    total_capex_with_replacement = total_capex + replacement_present_value\n",
        "\n",
        "    return {\n",
        "        \"electrolyzer_capex\": electrolyzer_capex,\n",
        "        \"asu_capex\": asu_capex,\n",
        "        \"hb_capex\": hb_capex,\n",
        "        \"storage_capex\": storage_capex,\n",
        "        \"total_capex_with_replacement\": total_capex_with_replacement\n",
        "    }\n",
        "\n",
        "def calculate_annual_operating_costs(config, capex_costs):\n",
        "    \"\"\"연간 OPEX 비용을 계산합니다.\"\"\"\n",
        "    electrolyzer_opex = capex_costs[\"electrolyzer_capex\"] * config['ELECTROLYZER_OPEX_RATE']\n",
        "    asu_opex = capex_costs[\"asu_capex\"] * config['ASU_OPEX_RATE']\n",
        "    hb_opex = capex_costs[\"hb_capex\"] * config['HB_OPEX_RATE']\n",
        "    storage_opex = capex_costs[\"storage_capex\"] * config['STORAGE_OPEX_RATE']\n",
        "\n",
        "    fixed_opex = electrolyzer_opex + asu_opex + hb_opex + storage_opex\n",
        "\n",
        "    annual_power_consumption = (config['PLANT_CAPACITY_KW'] * config['CAPACITY_FACTOR']) * 24 * 365\n",
        "    power_cost = annual_power_consumption * config['ELECTRICITY_COST']\n",
        "\n",
        "    total_opex = fixed_opex + power_cost\n",
        "\n",
        "    return {\n",
        "        \"fixed_opex\": fixed_opex,\n",
        "        \"power_cost\": power_cost,\n",
        "        \"total_annual_opex\": total_opex\n",
        "    }\n",
        "\n",
        "def calculate_lcoa(config, total_capex, total_annual_opex, annual_nh3_production_tonne):\n",
        "    \"\"\"LCOA (Levelized Cost of Ammonia)를 계산합니다.\"\"\"\n",
        "    # 분모 0 방지\n",
        "    denominator = ((1 + config['DISCOUNT_RATE']) ** config['PLANT_LIFETIME'] - 1)\n",
        "    if denominator == 0:\n",
        "        crf = 0\n",
        "    else:\n",
        "        crf = (config['DISCOUNT_RATE'] * (1 + config['DISCOUNT_RATE']) ** config['PLANT_LIFETIME']) / denominator\n",
        "\n",
        "    annualized_capex = total_capex * crf\n",
        "    total_annual_cost = annualized_capex + total_annual_opex\n",
        "\n",
        "    if annual_nh3_production_tonne == 0:\n",
        "        lcoa_production = 0\n",
        "    else:\n",
        "        lcoa_production = total_annual_cost / annual_nh3_production_tonne\n",
        "\n",
        "    transport_cost_per_tonne = config['TRANSPORT_DISTANCE_KM'] * config['TRANSPORT_COST_PER_TON_KM']\n",
        "    lcoa_final = lcoa_production + transport_cost_per_tonne\n",
        "\n",
        "    return {\n",
        "        \"lcoa_production\": lcoa_production,\n",
        "        \"transport_cost_per_tonne\": transport_cost_per_tonne,\n",
        "        \"lcoa_final\": lcoa_final,\n",
        "        \"total_annual_cost\": total_annual_cost,\n",
        "        \"annualized_capex\": annualized_capex\n",
        "    }"
      ],
      "outputs": [],
      "execution_count": null,
      "metadata": {
        "id": "IR8HwgwX9IJ_"
      }
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}